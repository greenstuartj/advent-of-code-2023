include "../base/base.pav"

record Range
  from : Int
  to   : Int
end

function repr(x : Range)
  return "Range(" + repr(x.from) + ", " + repr(x.to) + ")"
end

function is_subrange(sr : Range, r : Range)
  return sr.from >= r.from & sr.to <= r.to
end

record RangeMap
  from : Range
  to   : Range
end

function repr(x : RangeMap)
  return "RangeMap(" + repr(x.from) + ", " + repr(x.to) + ")"
end

function RangeMap(line : String)
  var r = map(split(line, " "), int)
  var from = Range(get(r, 1), get(r, 1)+get(r, 2)-1)
  var to   = Range(get(r, 0), get(r, 0)+get(r, 2)-1)
  return RangeMap(from, to)
end

function parse_map(m : String)
  return sort_with(map(slice(split(m, "\n"), 1), RangeMap), function(r1, r2)
    return r1.from.from < r2.from.from
  end)
end

function split(r : Range, rml : List)
  var sr = Range(r.from, r.to)
  var rm = Range(get(rml, 0).from.from, get(rml, 0).from.to)
  var result = List()
  var i = 0
  while i < len(rml) do
    rm = Range(get(rml, i).from.from, get(rml, i).from.to)
    if sr.from > rm.to then
      i += 1
    elif is_subrange(sr, rm) then
      append(result, sr)
      return result
    elif sr.to < rm.from then
      append(result, sr)
      return result
    elif sr.from < rm.from & sr.to >= rm.from & sr.to < rm.to then
      append(result, Range(sr.from, rm.from-1))
      append(result, Range(rm.from, sr.to))
      return result
    elif sr.from <= rm.from & sr.to >= rm.from & sr.to > rm.to then
      append(result, Range(sr.from, rm.from-1))
      append(result, rm)
      sr = Range(rm.to+1, sr.to)
      i += 1
    elif rm.from <= sr.from & rm.to < sr.to then
      append(result, Range(sr.from, rm.to))
      sr = Range(rm.to+1, sr.to)
      i += 1
    else
      _panic(repr(sr))
    end
  end
  append(result, sr)
  return result
end

function lookup(r : Range, rm : RangeMap)
  if is_subrange(r, rm.from) then
    var adjust = r.from-rm.from.from
    var new_from = rm.to.from+adjust
    return Some(Range(new_from, new_from+(r.to-r.from)))
  end
  return None
end

function lookup(r : Range, rml : List)
  for i = 0, i < len(rml), i += 1 do
    dispatch (lookup(r, get(rml, i)))
      (v : Some) return v.value
    and
      (v : None)
    end
  end
  return r
end

function lookup(rl : List, rml : List)
  var result = List()
  foreach(rl, function(r)
    var temp = List()
    foreach(split(r, rml), function(sr)
      append(temp, lookup(sr, rml))
    end)
    result += temp
  end)
  return result
end

function solve(file)
  var almenac = split(read_file(file), "\n\n")

  var seeds = map(split(get(split(get(almenac, 0), ": "), 1), " "), function(n)
    return Range(int(n), int(n))
  end)

  var maps = map(slice(almenac, 1), parse_map)

  var seed_ranges = List()
  for i = 0, i < len(seeds)-1, i += 2 do
    var r = Range(get(seeds, i).from, get(seeds, i).from+get(seeds, i+1).from-1)
    append(seed_ranges, r)
  end

  function run(seeds)
    var s = seeds
    foreach(maps, function(m)
      s = lookup(s, m)
    end)
    println(reduce(map(s, function(x) return x.from end), min))
  end

  run(seeds)
  run(seed_ranges)
end

for i = 2, i < len(_args()), i += 1 do
  solve(get(_args(), i))
end