include "../base/base.pav"

record Range
  from : Int
  dist : Int
end

function repr(x : Range)
  return "R(" + repr(x.from) + ", " + repr(x.dist) + ")"
end

function is_subrange(sr : Range, r : Range)
  return sr.from >= r.from & sr.from+sr.dist <= r.from+r.dist
end

record RangeMap
  from : Range
  to   : Range
end

function repr(x : RangeMap)
  return "RM(" + repr(x.from) + ", " + repr(x.to) + ")"
end

function RangeMap(line : String)
  var r = map(split(line, " "), int)
  return RangeMap(Range(get(r, 0), get(r, 2)), Range(get(r, 1), get(r, 2)))
end

function parse_map(m : String)
  return map(slice(split(m, "\n"), 1), RangeMap)
end

function lookup(r : Range, rm : RangeMap)
  if is_subrange(r, rm.to) then
    var new_from = rm.from.from+(r.from-rm.to.from)
    return Some(Range(new_from, r.dist))
  elif r.dist == 1 then
    return None
  end
  return None
end

function lookup(r : Range, rml : List)
  for i = 0, i < len(rml), i += 1 do
    dispatch (lookup(r, get(rml, i)))
      (lv : Some) return lv.value
    and
      (lv : None)
    end
  end
  return r
end

var almenac = split(read_file("input.txt"), "\n\n")

var seeds = map(split(get(split(get(almenac, 0), ": "), 1), " "), function(n) return Range(int(n), 1) end)

var maps = map(slice(almenac, 1), parse_map)

function solve(seeds)
  var locations = List()
  foreach(seeds, function(seed)
    var n = seed
    for i = 0, i < len(maps), i += 1 do
      n = lookup(n, get(maps, i))
    end
    append(locations, n)
  end)
  return locations
end

var part1 = reduce(map(solve(seeds), function(r) return r.from end), min)

println(part1)
