include "../base/base.pav"

function eq(x, y) return false end

object Space
object Round
object Cube

function eq(:Space, :Space) return true end
function eq(:Round, :Round) return true end
function eq(:Cube , :Cube)  return true end

function hash(:Space) return 3 end
function hash(:Round) return 5 end
function hash(:Cube)  return 7 end

object North
object South
object East
object West

function file(name)
  var lines = split(read_file(name), "\n")
  var dish = List(repeat(Cube, 2+len(get(lines, 0))))
  for i = 0, i < len(lines), i += 1 do
    var row = get(lines, i)
    var temp = List(Cube)
    for j = 0, j < len(row), j += 1 do
      var c = get(row, j)
      if c == '.' then
        append(temp, Space)
      elif c == 'O' then
        append(temp, Round)
      else
        append(temp, Cube)
      end
    end
    append(temp, Cube)
    append(dish, temp)
  end
  append(dish, repeat(Cube, len(get(dish, 0))))
  return dish
end

function shift(d, :North)
  var changes = 0
  for i = 0, i < len(d), i += 1 do
    var row = get(d, i)
    for j = 0, j < len(row), j += 1 do
      dispatch get(row, j) do
        (:Round)
	  dispatch get(get(d, i-1), j) do
	    (:Space)
	      set(get(d, i-1), j, Round)
	      set(row, j, Space)
	      changes += 1
	  and
	    (x)
	  end
      and
        (x)
      end
    end
  end
  return changes
end

function shift(d, :South)
  var changes = 0
  for i = len(d)-1, i >= 0, i -= 1 do
    var row = get(d, i)
    for j = 0, j < len(row), j += 1 do
      dispatch get(row, j) do
        (:Round)
	  dispatch get(get(d, i+1), j) do
	    (:Space)
	      set(get(d, i+1), j, Round)
	      set(row, j, Space)
	      changes += 1
	  and
	    (x)
	  end
      and
        (x)
      end
    end
  end
  return changes
end

function shift(d, :East)
  var changes = 0
  for i = 0, i < len(d), i += 1 do
    var row = get(d, i)
    for j = len(row)-1, j >= 0, j -= 1 do
      dispatch get(row, j) do
        (:Round)
	  dispatch get(row, j+1) do
	    (:Space)
	      set(row, j+1, Round)
	      set(row, j, Space)
	      changes += 1
	  and
	    (x)
	  end
      and
        (x)
      end
    end
  end
  return changes
end

function shift(d, :West)
  var changes = 0
  for i = 0, i < len(d), i += 1 do
    var row = get(d, i)
    for j = 0, j < len(row), j += 1 do
      dispatch get(row, j) do
        (:Round)
	  dispatch get(row, j-1) do
	    (:Space)
	      set(row, j-1, Round)
	      set(row, j, Space)
	      changes += 1
	  and
	    (x)
	  end
      and
        (x)
      end
    end
  end
  return changes
end

function until_unchanged(d, dir)
  while shift(d, dir) != 0 do end
end

function cycle(d)
  until_unchanged(d, North)
  until_unchanged(d, West)
  until_unchanged(d, South)
  until_unchanged(d, East)
end

function loop(d)
  var current = d
  var states = Dict(1000000)
  var ds = List()
  var i = 0
  while !contains(states, current) do
    var gc = _copy(current)
    set(states, gc, i)
    append(ds, gc)
    cycle(current)
    i += 1
  end
  var start = get(states, current)
  var length = i - start
  var final = start + 1000000000 - (start + length * ((1000000000 - start) / length))
  return get(ds, final)
end

function load(d)
  var row_n = len(d)-2
  var result = 0
  for i = 1, i < len(d), i += 1 do
    var row = get(d, i)
    for j = 0, j < len(row), j += 1 do
      dispatch get(row, j) do
        (:Round)
          result += row_n
      and
        (x)
      end
    end
    row_n -= 1
  end
  return result
end

var d = file(get(_args(), 2))

var part1 = _copy(d)
until_unchanged(part1, North)
println(load(part1))

println(load(loop(_copy(d))))
