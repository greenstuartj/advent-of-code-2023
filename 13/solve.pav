include "../base/base.pav"

object Ash
object Rock

function int(:Ash)  return 0 end
function int(:Rock) return 1 end

function eq(:Ash,  :Ash)  return true  end
function eq(:Rock, :Rock) return true  end
function eq(:Ash,  :Rock) return false end
function eq(:Rock, :Ash)  return false end

record Perfect
  start
  finish
end

record Smudged
  start
  finish
end

function transpose(g)
  var result = List()
  for i = 0, i < len(get(g, 0)), i += 1 do
    append(result, map(g, function(row) return get(row, i) end))
  end
  return result
end

function diff(l1 : List, l2 : List)
  var result = 0
  for i = 0, i < len(l1), i += 1 do
    result += int(get(l1, i) != get(l2, i))
  end
  return result
end

function find_same(grid)
  var result = List()
  for i = 0, i < len(grid)-1, i += 1 do
    if diff(get(grid, i), get(grid, i+1)) == 0 then
      append(result, Perfect(i, i+1))
    elif diff(get(grid, i), get(grid, i+1)) == 1 then
      append(result, Smudged(i, i+1))
    end
  end
  return result
end

function expand_same(grid, original, p : Perfect)
  if p.start == 0 | p.finish == len(grid)-1 then
    return Some(Perfect(original.start, original.finish))
  end
  var d = diff(get(grid, p.start-1), get(grid, p.finish+1))
  if d == 0 then
    return expand_same(grid, original, Perfect(p.start-1, p.finish+1))
  elif d == 1 then
    return expand_same(grid, original, Smudged(p.start-1, p.finish+1))
  end
  return None
end

function expand_same(grid, original, s : Smudged)
  if s.start == 0 | s.finish == len(grid)-1 then
    return Some(Smudged(original.start, original.finish))
  end
  if get(grid, s.start-1) == get(grid, s.finish+1) then
    return expand_same(grid, original, Smudged(s.start-1, s.finish+1))
  end
  return None
end

record Normal
  reflect
end

record Transposed
  reflect
end

function answer(x : Normal)
  return (x.reflect.start+1) * 100
end

function answer(x : Transposed)
  return x.reflect.start+1
end

function get_reflections(grid)
  var result = List()
  foreach(find_same(grid), function(e)
    dispatch expand_same(grid, e, e) do
      (x : Some) append(result, x.value)
    and
      (:None)
    end
  end)
  return result
end

function find_reflections(grid, sort_f : Function)
  var reflections = map(get_reflections(grid), Normal) + map(get_reflections(transpose(grid)), Transposed)
  return sort_with(reflections, function(a, b) return sort_f(a.reflect, b.reflect) end)
end

function solve(grids, sort_f)
  var result = 0
  for i = 0, i < len(grids), i += 1 do
    result += answer(get(find_reflections(get(grids, i), sort_f), 0))
  end
  return result
end

function part1(:Perfect, :Smudged) return true  end
function part1(x, y)               return false end

function part2(:Smudged, :Perfect) return true  end
function part2(x, y)               return false end

var grids = map(split(read_file(get(_args(), 2)), "\n\n"), function(g)
  return map(split(g, "\n"), function(row)
    return map(row, function(c)
      if c == '.' then return Ash else return Rock end
    end)
  end)
end)

println(solve(grids, part1))
println(solve(grids, part2))

