include "../base/base.pav"

function transpose(g)
  var result = List()
  for i = 0, i < len(get(g, 0)), i += 1 do
    append(result, reduce(map(g, function(row) return get(row, i) end), "", plus))
  end
  return result
end

var grids = map(split(read_file("input.txt"), "\n\n"), function(g)
  return split(g, "\n")
end)

function find_reflect_candidates(g)
  var result = List()
  for i = 0, i < len(g)-1, i += 1 do
    if get(g, i) == get(g, i+1) then
      append(result, Pair(i, i+1))
    end
  end
  return result
end

function expand_reflect_candidate(g, rc)
  var p = Pair(rc.first, rc.second)
  while p.first != 0 & p.second != len(g)-1 do
    if get(g, p.first) != get(g, p.second) then
      return None
    end
    p = Pair(p.first-1, p.second+1)
  end
  if get(g, p.first) != get(g, p.second) then
    return None
  end
  return Some(rc.first)
end

function find_reflect(g)
  var rc = find_reflect_candidates(g)
  var result = 0
  for i = 0, i < len(rc), i += 1 do
    dispatch (expand_reflect_candidate(g, get(rc, i)))
      (c : Some) return Some(c.value)
    and
      (:None)
    end
  end
  return None
end

var fail = 0
var i = 0
function find_reflection(g)
  dispatch (find_reflect(g))
    (r : Some)
      return 100 * (r.value+1)
  and
    (:None)
      dispatch (find_reflect(transpose(g)))
        (r : Some)
          return r.value+1
      and
        (:None)
          foreach(g, println)
          fail = g
          _panic("wut")
      end
  end
end

println(sum(map(grids, find_reflection))
