
function len(x : List)
  return _list_len(x)
end

function get(x : List, index : Int)
  return _list_index(x, index)
end

function get_or(x, index : Int, default)
  if index >= len(x) | index < 0 then
    return default
  end
  return get(x, index)
end

function set(x : List, index : Int, value)
  _list_set(x, index, value)
end

function append(x : List, y)
  _list_append(x, y)
  return x
end

function plus(x : List, y : List)
  var result = copy(x)
  for i = 0, i < len(y), i += 1 do
    append(result, get(y, i))
  end
  return result
end

function hash(x : List)
  var result = 1
  foreach(x, function(e)
    result = result * hash(e) * 31
  end)
  return result
end

function map(x, f : Function)
  var result = List()
  for i = 0, i < len(x), i += 1 do
    result = append(result, f(get(x, i)))
  end
  return result
end

function filter(x, f : Function)
  var result = List()
  for i = 0, i < len(x), i += 1 do
    if f(get(x, i)) then
      append(result, get(x, i))
    end
  end
  return result
end

function foreach(x : List, f : Function)
  for i = 0, i < len(x), i += 1 do
    f(get(x, i))
  end
end

function range(from, to, step)
  var result = List()
  for i = from, i < to, i += step do
    append(result, i)
  end
  return result
end

function range(from, to)
  return range(from, to, 1)
end

function reduce(x : List, initial, f)
  var result = initial
  for i = 0, i < len(x), i += 1 do
    result = f(result, get(x, i))
  end
  return result
end

function reduce(x : List, f : Function)
  return reduce(x, get(x, 0), f)
end

function sum(x : List)
  return reduce(x, 0, plus)
end

function product(x : List)
  return reduce(x, 1, multiply)
end

function scan(x : List, f)
  var result = List()
  for i = 1, i <= len(x), i += 1 do
    append(result, f(slice(x, 0, i)))
  end
  return result
end

function window(x : List, size : Int, f)
  var result = List()
  var from = 0
  var to   = from+size
  while to <= len(x) do
    append(result, f(slice(x, from, to)))
    from = from + 1 # to
    to   = to + 1   # from+size
  end
  
  return result
end

function repeat(x, times : Int)
  var result = List()
  for i = 0, i < times, i += 1 do
    append(result, x)
  end
  return result
end

function repr(x : List)
  var s = "["
  for i = 0, i < len(x), i += 1 do
    s = s + repr(get(x, i))
    if i != len(x)-1 then
      s = s + ", "
    end
  end
  s = s + "]"
  return s
end

function copy(x : List)
  var result = List()
  for i = 0, i < len(x), i += 1 do
    append(result, get(x, i))
  end
  return result
end

function split(x : List, s)
  return split(x, s, List())
end

function split(x, sep, initial)
  var result = List()
  var temp = copy(initial)
  for i = 0, i < len(x), i += 1 do
    var e = get(x, i)
    if e == sep then
      append(result, temp)
      temp = copy(initial)
    else
      temp = append(temp, e)
    end
  end
  append(result, temp)
  return result
end

function slice(x, from : Int, to : Int, initial)
  var result = copy(initial)
  for i = from, i < to, i +=1  do
    result = append(result, get(x, i))
  end
  return result
end

function slice(x : List, from : Int, to : Int)
  return slice(x, from, to, List())
end

function slice(x, from)
  return slice(x, from, len(x))
end

function starts_with(x, y)
  if len(x) < len(y) then
    return false
  end
  for i = 0, i < len(y), i += 1 do
    if get(x, i) != get(x, i) then
      return false
    end
  end
  return true
end

function reverse(x, initial)
  var result = copy(initial)
  for i = len(x)-1, i >= 0, i -= 1 do
    result = append(result, get(x, i))
  end
  return result
end

function reverse(x : List)
  return reverse(x, List())
end

function zip(x, y)
  return zip(x, y, List)
end

function zip(x, y, f)
  var result = List()
  for i = 0, i < min(len(x), len(y)), i += 1 do
    result = append(result, f(get(x, i), get(y, i)))
  end
  return result
end

function index(x, f : Function)
  for i = 0, i < len(x), i += 1 do
    if f(get(x, i)) then
      return i
    end
  end
  _panic("index of item not found")
end

function index(x, e)
  for i = 0, i < len(x), i += 1 do
    if get(x, i) == e then
      return i
    end
  end
  _panic("index of item not found")
end

function indices(x, f : Function)
  var result = List()
  for i = 0, i < len(x), i += 1 do
    if f(get(x, i)) then
      result = append(result, i)
    end
  end
  return result
end

function indices(x, e)
  var result = List()
  for i = 0, i < len(x), i += 1 do
    if get(x, i) == e then
      result = append(result, i)
    end
  end
  return result
end

function c_eq(x, y)
  if len(x) != len(y) then
    return false
  end
  for i = 0, i < len(x), i += 1 do
    if get(x, i) != get(y, i) then
      return false
    end
  end
  return true
end

function eq(x : List, y : List)
  return c_eq(x, y)
end

function ne(x, y)
  return !(x==y)
end

function c_lt(x, y)
  for i = 0, i < min(len(x), len(y)), i += 1 do
    if get(x, i) < get(y, i) then
      return true
    elif get(x, i) > get(y, i) then
      return false
    end
  end
  return len(x) < len(y)
end

function lt(x : List, y : List)
  return c_lt(x, y)
end

function le(x, y)
  return x < y | x == y
end

function c_gt(x, y)
  for i = 0, i < min(len(x), len(y)), i += 1 do
    if get(x, i) > get(y, i) then
      return true
    elif get(x, i) < get(y, i) then
      return false
    end
  end
  return len(x) > len(y)
end

function gt(x : List, y : List)
  return c_gt(x, y)
end

function ge(x, y)
  return x > y | x == y
end

function merge_with(x : List, y : List, sort_f : Function)
  var result = List()
  var x_i = 0
  var y_i = 0
  while x_i < len(x) | y_i < len(y) do
    if x_i == len(x) & y_i != len(y) then
      append(result, get(y, y_i))
      y_i += 1
    elif y_i == len(y) & x_i != len(x) then
      append(result, get(x, x_i))
      x_i += 1
    else
      if sort_f(get(x, x_i), get(y, y_i)) then
        append(result, get(x, x_i))
	x_i += 1
      else
        append(result, get(y, y_i))
	y_i += 1
      end
    end
  end
  return result
end

function sort_with(x : List, sort_f : Function)
  if len(x) <= 1 then return x end
  var first = slice(x, 0, len(x)/2)
  var second = slice(x, len(x)/2)
  return merge_with(sort_with(first, sort_f), sort_with(second, sort_f), sort_f)
end