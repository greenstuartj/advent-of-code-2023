include "../base/base.pav"

object Up
object Down
object Left
object Right

function repr(:Up)    return "Up"    end
function repr(:Down)  return "Down"  end
function repr(:Left)  return "Left"  end
function repr(:Right) return "Right" end

function eq(:Up, :Up)       return true  end
function eq(:Down, :Down)   return true  end
function eq(:Left, :Left)   return true  end
function eq(:Right, :Right) return true  end
function eq(x, y)           return false end

function to_dir(s : String)
  if   s == "U" then return Up
  elif s == "D" then return Down
  elif s == "L" then return Left
  elif s == "R" then return Right
  end
end

function to_dir(c : Char)
  if   c == '0' then return Right
  elif c == '1' then return Down
  elif c == '2' then return Left
  elif c == '3' then return Up
  end
end

function exp(x, y)
  var result = 1
  for i = 0, i < y, i += 1 do
    result = result * x
  end
  return result
end

function from_hex(s : String)
  var t = "0123456789abcdef"
  var result = 0
  for i = 0, i < len(s), i += 1 do
    result += index(t, get(s, i)) * exp(16, (len(s)-1)-i)
  end
  return result
end

record Dig
  direction
  length
  colour
end

function Dig(s : String)
  var sl = split(s, " ")
  return Dig(to_dir(get(sl, 0)), int(get(sl, 1)), get(sl, 2))
end

function Dig(d : Dig)
  var length = from_hex(slice(d.colour, 2, len(d.colour)-2))
  var direction = to_dir(get(d.colour, len(d.colour)-2))
  return Dig(direction, length, d.length)
end

function repr(x : Dig)
  return "Dig(" + repr(x.direction) + ", " + repr(x.length) + ", " + repr(x.colour) + ")"
end

function shoelace(points)
  var a = 0
  var b = 0
  for i = 0, i < len(points), i += 1 do
    var c1 = get(points, i)
    var c2 = get(points, (i+1)%len(points))
    a += c1.row * c2.col
    b += c1.col * c2.row
  end
  return abs(abs(a) - abs(b))
end

function move(c : Coord, length, :Up)    return Coord(c.row-length, c.col) end
function move(c : Coord, length, :Down)  return Coord(c.row+length, c.col) end
function move(c : Coord, length, :Left)  return Coord(c.row, c.col-length) end
function move(c : Coord, length, :Right) return Coord(c.row, c.col+length) end

function solve(instructions)
  var points = List()
  var current = Coord(0, 0)
  append(points, current)
  foreach(instructions, function(instruction)
    current = move(current, instruction.length, instruction.direction)
    append(points, current)
  end)
  println(((shoelace(points) + sum(map(instructions, function(i) return i.length end))) / 2) + 1)
end

var instructions = map(split(read_file("input.txt"), "\n"), Dig)

solve(instructions)
solve(map(instructions, Dig))