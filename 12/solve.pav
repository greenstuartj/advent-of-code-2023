include "../base/base.pav"

record LL
  value
  next
end

object LLEnd

function LL(x : List)
  var y = reverse(x)
  var ll = LLEnd
  for i = 0, i < len(y), i += 1 do
    ll = LL(get(y, i), ll)
  end
  return ll
end

function repr(:LLEnd) return "" end
function repr(x : LL) return repr(x.value) + " " + repr(x.next) end

object Operational
object Damaged
object Unknown

function repr(:Operational) return "." end
function repr(:Damaged)     return "#" end
function repr(:Unknown)     return "?" end

function eq(:Operational, :Operational) return true  end
function eq(:Damaged,     :Damaged)     return true  end
function eq(:Unknown,     :Unknown)     return true  end
function eq(x,            y)            return false end

record Condition
  row     : List
  numbers : List
end

function repr(x : Condition)
  return "Condition(" + repr(x.row) + ", " + repr(x.numbers) + ")"
end

function process_line(line)
  var sl = split(line, " ")
  var row = map(get(sl, 0), function(c)
    if c == '.' then
      return Operational
    elif c == '?' then
      return Unknown
    else
      return Damaged
    end
  end)
  var numbers = map(split(get(sl, 1), ","), int)
  return Condition(row, numbers)
end

var conditions = map(split(read_file("sample.txt"), "\n"), process_line)


function possibilities(c : Condition)
  var row = LL(c.row)
  var ns  = LL(c.numbers)
  return row
end